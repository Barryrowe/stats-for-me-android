apply plugin: 'android'

configurations {
    apt
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    packagingOptions {
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

ext.androidAnnotationsVersion = '2.7.1';
ext.springAndroidRestVersion = '1.0.1.RELEASE';
ext.jacksonVersion = '2.2.3';
ext.simpleFrameworkVersion = '2.6.9';
ext.jacksonMapperVersion = '1.8.5';
ext.gsonVersion = '2.2.4';
ext.commonsHttpClientVersion = '3.1';

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    apt "com.googlecode.androidannotations:androidannotations:${androidAnnotationsVersion}"
    compile "com.googlecode.androidannotations:androidannotations-api:${androidAnnotationsVersion}"
    //compile "commons-httpclient:commons-httpclient:${commonsHttpClientVersion}"
    //compile "org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}"
    //compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    //compile "org.simpleframework:simple-xml:${simpleFrameworkVersion}"
    compile "org.springframework.android:spring-android-core:${springAndroidRestVersion}"
    compile "org.springframework.android:spring-android-rest-template:${springAndroidRestVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"
}

android.applicationVariants.all { variant ->
    aptOutput = file("${project.buildDir}/source/apt_generated/${variant.dirName}")
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "****************************"

    variant.javaCompile.doFirst {
        println "*** compile doFirst ${variant.name}"
        aptOutput.mkdirs()
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                '-s', aptOutput
        ]
    }
}
